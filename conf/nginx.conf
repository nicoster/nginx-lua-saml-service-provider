
worker_processes 1;
error_log logs/error.log debug;
pid	logs/nginx.pid;

events {
    worker_connections 1024;
}

http {
    lua_shared_dict sso_sessions 1m;
    lua_shared_dict sso_redirect_urls 128k;
    lua_package_path '/usr/local/share/lua/5.3/?.lua;/usr/lib/nginx/lua/?.lua;/etc/nginx/lua/?.lua;;$prefix/?.lua;$prefix/lib/?.lua;';
    server {
        include ssl.conf*;

        # server_name sp.example.com;

        # ssl_session_cache shared:SSL:10m;
        # ssl_session_timeout 5m;
        # ssl_ciphers AESGCM:HIGH:!EXP:!RC4:!LOW:!aNULL;
        # ssl_prefer_server_ciphers on;
        #ssl_protocols TLSv1.2;
        # ssl_certificate /etc/pki/tls/certs/sp.example.com.crt;
        # ssl_certificate_key /etc/pki/tls/private/sp.example.com.key;

        location / {
            access_by_lua_block {
                local config = require "conf.config"
                local sp = require("saml.service_provider"):new(config)

                local ok, err = sp:access()
                if not ok then
                    ngx.log(ngx.ERR, err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    return
                end
            }

            root html;

            content_by_lua_block {
                local config = require "conf.config"
                local sp = require("saml.service_provider"):new(config)
                local ok, mail = sp:access()

                ngx.header['Content-Type'] = 'text/html;charset=utf-8'
                
                local template = require "resty.template"
                template.render("view.html", { message = "Hello, World!" , names = {mail}})                
            }
        }

        location /sso/finish-login {
            content_by_lua_block {
                local config = require "conf.config"
                local sp = require("saml.service_provider"):new(config)

                local ok, err = sp:finish_login()
                if err ~= nil then
                    ngx.log(ngx.ERR, err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    return
                end
            }
        }

        location /sso/logout {
            content_by_lua_block {
                local config = require "saml.service_provider.config"
                local sp = require("saml.service_provider"):new(config)

                local ok, err = sp:logout()
                if err ~= nil then
                    ngx.log(ngx.ERR, err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    return
                end
            }
        }
    }
}